Menu Project

>>>> DOMContentLoaded

first of all we have an array with all the values we want to display when we load the page. Normally we would use an external api for all this data by setting up an ajx request but here we are hardcoding the values so that we learn the  how fundamentals.
First thing we did here was to select the section Center because the section center is the parent of each individual menu item and hence is where we are going to place the changed structure of our html menu item.

2>>> we then invoked the DOMContentLoaded event listener and invoked it on the windows(not the document, because you can also do this) 

3 >>> we gave it a paremeter of  item and moved on to assign our map function on our menu array to a variable of showMenu because the Map function will return a new array.

4>>> in our map method logic body, after giving our paremter a name of item , we first returned our regular menu item structure from our html document and then went ahead to replace the individual details with the for instance, ""item.img, item.title etc (remember that this title, img etc are being referenced from our menu array above.)

5 >>> we then used the following syntax to place this structure change, into our previously selectced sectionCenter
"sectionCenter.innerHtml = showMenu.join('') (we put the strings inside to avoid commas)

#With the map method we are going to be returning the number of items we have in our array menu array or any array at all and then we changing the the structure of this 16 items  by putting them inside our regular html structure and then placing them inside our sectionCenter on the page.

#### NOW NOTE
>>>>>when you are copying your regular html structure and returning it in our map array method, make sure to retain all the classes even within the map method, if not the css will be tampered with and also make sure to use temperate literals




#REFACTORING 

Now the next thing we are going to do is to refactor our code by placing our map method into a function, as we going to be performing other  operations and do not want to repeat our code over and over again. After refactoring, we can simply pass in our function into the DOMContentLoaded event and2 other places
#when we pass our map method into our showMenuItems function, we are going to change the menu.map to the parameter of the showMenuItems function so that we can pass in other arguments when working with other methods but remember that when we call our function in the DOMContentLoaded event listener, we have to pass in our menu array as the argument with the values.

#dataset can be added to all elements and the way it works, on the element we can add an attribute with a prefix data followed by a hyphen and a name " data-id = 'all' "

after this, we assign the evt.currentTarget.dataset.id to a a variable ; category and then we create a a variable; menu category that filters the menu array with the logic that if the menuItem.category is equals to the dataset category button then we will return that array.
>>> we had the general  class so we said that if the dataset category is equals to the all string id, we will call our showMenuItems function on the menu item, which will display everything we have in the menu array placed in the sectionCenter.
then we create an else statment where barring this we are going to return our showMenuItems function on our filtered array.

###Now we need to add our button/categories dynamically.
we want to add the buttons dynamically in a way that when we add a new category, we wont need to go back to our html document and add that button, but as soon as the category is added, the button will be added.














>>>BELOW IS OUR JAVASCRIPT CODE AND THE NOTES FOLLOWING. it<<<<<<




// normally you would get this data by setting up an ajax request(getting it from an external API), so you wont have to hard-code all these values
// menu items
const menu = [
  {
    id: 1,
    title: "crust Hamburger",
    category: "breakfast",
    price: 13.99,
    img: "./images/Dish-1.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },

  {
    id: 2,
    title: "Prawn Pasta",
    category: "breakfast",
    price: 15.99,
    img: "./images/Dish-2-Prawn-Pasta.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 3,
    title: "bowl ice-cream",
    category: "specials",
    price: 18.99,
    img: "./images/Dish-3-Bowl-Ice-Cream.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 4,
    title: "BlueBerry Pancake",
    category: "breakfast",
    price: 13.99,
    img: "./images/Dish-4-Blueberries-Pancake.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 5,
    title: "Egg lavana",
    category: "breakfast",
    price: 19.99,
    img: "./images/Dish-6-Egg-lavana.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 6,
    title: "Pork pizza",
    category: "lunch",
    price: 24.99,
    img: "./images/Dish-7-Pork-Pizza-Lunch.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 7,
    title: "Pumpkin Soup",
    category: "lunch",
    price: 19.99,
    img: "./images/Dish-8-Pumpkin-soup-Lunch.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 8,
    title: "Curry Food",
    category: "lunch",
    price: 21.99,
    img: "./images/Dish-9-Curry-Food-Lunch.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 9,
    title: "Ramen Soup",
    category: "lunch",
    price: 24.99,
    img: "./images/Dish-10-Ramen-Soup-Lunch.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 10,
    title: "Roasted Steak",
    category: "lunch",
    price: 34.99,
    img: "./images/Dish-11-Roasted-Steak-Lunch.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 11,
    title: "Gellato Pineaple",
    category: "specials",
    price: 17.99,
    img: "./images/Dish-12-Gellato-Pineaple-specials.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 12,
    title: "Mango Nature",
    category: "specials",
    price: 15.99,
    img: "./images/Dish-13-Mango-Nature-specials.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 13,
    title: "le Tropicales",
    category: "specials",
    price: 25.99,
    img: "./images/Dish-14-Le-Tropicales-specials.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 14,
    title: "Kagyana Strapatsada",
    category: "dinner",
    price: 25.99,
    img: "./images/Dish-15-Kagyana-Strapatsada-dinner.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 15,
    title: "Salad",
    category: "dinner",
    price: 9.99,
    img: "./images/dish-16-Salad-dinner.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
  {
    id: 16,
    title: "crust Hamburger",
    category: "breakfast",
    price: 13.99,
    img: "./images/Dish-1.jpg",
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus tempora eveniet, rem asperiores eligendi magnam recusandae autem unde a suscipit.",
  },
];

// we select the section center because the section center is the parent div for all our items that we are going to dynamically access from our above menu array and fill up our page. So basically, after accessing our array anc getting this object we want to place them somewher, that is where our section center div comes in.
const sectionCenter = document.querySelector(".section-center");
const btnContainer = document.querySelector(".btn-container");

const btns = document.querySelectorAll(".filter-btn");

// when our page loads we will want to access all our items and use them to populate our page
// # Map Function >>> always returns an array, always depends on the parent or original array and cannot change the array length like the filter method.
// so yeah you can modify the content of the original array.
// also with the map it effects changes to all members of the array.

// load Items
window.addEventListener("DOMContentLoaded", function (item) {
  showMenuItems(menu);

  // here we want to return buttons for each category created and we want to only return the unique categories such as breakfast, lunch, dinner etc. Also if you notice we start with an initial value of an array and all string since it is not part of our categories but we want to be able to access all our menuitems
  const categories = menu.reduce(
    function (acc, currItem) {
      // we check to see if the currItem category is in our array that we are returning down below.
      // Then in a lame man's language, we set up a logic that says if the array we are returning down there which is represented by our total parameter namely acc(i.e if the acc array ) does not contain the category of each individual item(i.e the individual objects in the menu array), we will add it but if it is already contained inside the array we wont need to add it again, we will just return it.
      // also note that we begin with an  initial value of an array because we are basically returnng an array. an inside that array we are going to have a value of 'all btn' since we want to have a btn that shows all the items
      if (!acc.includes(currItem.category)) {
        acc.push(currItem.category);
      }
      return acc;
    },
    ["all"]
  );



  // so many notes yeah i know. well here we want to select all our unique categories and return them as buttons.
  const categoryBtn = categories.map(function (category) {
    return `<button type="button" class="btn filter-btn one" data-id="${category}"> ${category} </button>`;
  });

  btnContainer.innerHTML = categoryBtn.join("");
});

// filter items
btns.forEach(function (btn) {
  btn.addEventListener("click", function (evt) {
    const category = evt.currentTarget.dataset.id;

    const menuCategory = menu.filter(function (menuItem) {
      // so here we want to say that if the category (whether breakfast, lunch, dinner etc ) is contained in our menuItem category then we will return that menuItem
      if (menuItem.category === category) {
        return menuItem;
      }
    });
    if (category === "all") {
      return showMenuItems(menu);
    } else {
      // here we are calling this function on our filtered array that has a condition in the logic body
      return showMenuItems(menuCategory);
    }
  });
});

// General function
function showMenuItems(menuItems) {
  let showMenu = menuItems.map(function (item) {
    return `      <!-- item 1-->
<article class="menu-item">
<div class="menu-img">
  <img src=" ${item.img} " class="img photo" alt=" ${item.title} ">
</div>
<!-- item info -->
<div class="item-info">
  <header >
<h5> ${item.title} </h5>
<span class="price"> ${item.price} </span>
  </header>
  <p class="item-text">${item.text} </p>
</div>
</article>
          <!-- end of item 1 -->`;
  });

  sectionCenter.innerHTML = showMenu.join("");
}

// up above in the map method we returned the changed structure of the individual item, then we accessed each item data from our array and joined it, placing each menu item inside the section center

// the logic is that when we click a certain button we want to diplay a certain category, whether all of them, breakfast, lunch, dinner or our special category.











































































































































































